<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[magarcia]]></title>
        <description><![CDATA[A personal blog by Martin Garcia. Thoughts, words, and experiments about code.]]></description>
        <link>https://magarcia.io</link>
        <generator>Next.js using RSS for Node.js</generator>
        <lastBuildDate>Sat, 27 Apr 2024 19:53:17 GMT</lastBuildDate>
        <atom:link href="https://magarcia.io/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Martin Garcia]]></author>
        <copyright><![CDATA[All rights reserved 2024, Martin Garcia]]></copyright>
        <language><![CDATA[en]]></language>
        <managingEditor><![CDATA[Martin Garcia]]></managingEditor>
        <item>
            <title><![CDATA[A Comprehensive Guide to DMARC: Ensuring Email Integrity and Trust]]></title>
            <description><![CDATA[When building a digital project, ensuring your emails land safely and are trusted is paramount. But how do you navigate the maze of email security? Enter DMARC. Alongside its companions, SPF and DKIM, we delve deep into establishing email integrity and combating threats like email spoofing and phishing.]]></description>
            <guid isPermaLink="false">A Comprehensive Guide to DMARC: Ensuring Email Integrity and Trust</guid>
            <category><![CDATA[buildinpublic]]></category>
            <category><![CDATA[learninpublic]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Mon, 11 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;In the early days of developing &lt;a href=&quot;https://voices.ink/&quot;&gt;Voices.ink&lt;/a&gt;, a collaborative project with &lt;a href=&quot;https://github.com/estermv&quot;&gt;@Ester Martí&lt;/a&gt; that effortlessly transcribes voice notes into your Notion account, I faced a common doubt. How could I ensure that our transactional emails wouldn’t end up lost in the void of spam folders or worse, be weaponized for phishing? My research for a secure and trustworthy email environment led me to DMARC.&lt;/p&gt;
&lt;p&gt;In an age where email forms the backbone of professional communication, its security vulnerabilities are startling. Cyber attackers and fraudulent entities are constantly on the prowl, using sophisticated techniques to deceive through email spoofing and phishing. As email fraud escalates, the need for a robust solution becomes imperative. Enter DMARC — an advanced email protocol that promises to restore trust in our inboxes.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Why Do We Need DMARC?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Email&apos;s inherent vulnerabilities make it susceptible to domain impersonation, where attackers send emails pretending to be from trusted sources. While solutions like SPF (Sender Policy Framework) and DKIM (DomainKeys Identified Mail) were introduced to counter these threats, they weren’t foolproof. DMARC (Domain-based Message Authentication, Reporting &amp;amp; Conformance) fills this gap by building upon and leveraging the strengths of both SPF and DKIM.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Understanding DMARC&apos;s Significance&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;DMARC serves three main purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: Ensuring that an email claiming to be from a specific domain genuinely originates from that domain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reporting&lt;/strong&gt;: Enabling domain recipients to report back to the sender about DMARC evaluation results, thereby offering insights into potential issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Policy Enforcement&lt;/strong&gt;: Granting domain owners the power to specify how unauthenticated emails should be handled.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://www.globalcyberalliance.org/wp-content/uploads/GCA-DMARC-Resource-Kit-Infographic-update@2x@0.5x.png&quot; alt=&quot;How DEMARC Works Diagram&quot;&gt;
&lt;em&gt;Image Credit: Global Cyber Alliance&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;The Building Blocks of DMARC: SPF &amp;amp; DKIM&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SPF&lt;/strong&gt; verifies that the email&apos;s sending server has the domain owner&apos;s authorization. It uses a specific TXT record in the DNS, like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v=spf1 ip4:192.0.2.0/24 ip4:198.51.100.123 a:mail.example.com -all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This record essentially says, &amp;quot;Only the IP range 192.0.2.0 to 192.0.2.255 and 198.51.100.123 are authorized to send emails for my domain.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v=spf1&lt;/code&gt;: This indicates the version of SPF being used, which is SPF version 1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip4:192.0.2.0/24&lt;/code&gt;: Authorizes the IP range 192.0.2.0 to 192.0.2.255 to send emails for the domain.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip4:198.51.100.123&lt;/code&gt;: Authorizes the specific IP address 198.51.100.123.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:mail.example.com&lt;/code&gt;: Authorizes the IP address resolved from the domain name mail.example.com.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-all&lt;/code&gt;: Specifies that no other hosts are allowed to send emails. (The &apos;-&apos; is a hard fail, meaning emails from other sources should be rejected. &lt;code&gt;~all&lt;/code&gt; would be a soft fail, suggesting they should be accepted but marked.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DKIM&lt;/strong&gt;, on the other hand, ensures the email&apos;s integrity by using cryptographic signatures. A typical DKIM TXT DNS record might look like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v=DKIM1; p=MIGfMA0GCSqG...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This record holds the public key used by receiving servers to decrypt the email&apos;s DKIM signature and verify its authenticity.&lt;/p&gt;
&lt;p&gt;The record&apos;s name typically includes a selector prefix, allowing the domain to have multiple DKIM keys. When sending an email, the server will mention which selector it&apos;s using, guiding the receiving server to the right DNS record.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v=DKIM1&lt;/code&gt;: This signifies the version of DKIM being used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p=&lt;/code&gt;: This is the public key that receiving servers use to decrypt the DKIM signature in the email header. The actual key would be a long string (truncated in the example).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;DMARC in Action&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When DMARC is implemented, domain owners publish a DMARC policy in their TXT DNS records (using the name &lt;code&gt;_dmarc&lt;/code&gt;), such as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v=DMARC1; p=reject; rua=mailto:reports@example.com; ruf=mailto:forensic@example.com; pct=100; aspf=r; adkim=r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This record translates to: &amp;quot;If an email fails DMARC authentication, reject it. And send aggregate DMARC reports to &lt;a href=&quot;mailto:reports@example.com&quot;&gt;reports@example.com&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v=DMARC1&lt;/code&gt;: Indicates the DMARC version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p=reject&lt;/code&gt;: Policy to apply to emails that fail DMARC. Other values can be &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;quarantine&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rua=mailto:reports@example.com&lt;/code&gt;: Address where aggregate DMARC reports should be sent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruf=mailto:forensic@example.com&lt;/code&gt;: Address where forensic (detailed) DMARC reports should be sent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pct=100&lt;/code&gt;: Percentage of emails to which the DMARC policy should be applied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aspf=r&lt;/code&gt;: SPF alignment mode. &apos;r&apos; means relaxed (default), while &apos;s&apos; stands for strict.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adkim=r&lt;/code&gt;: DKIM alignment mode. &apos;r&apos; is for relaxed, and &apos;s&apos; is for strict.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once an email is received, the receiving server validates it against SPF and DKIM. For DMARC to pass, at least one of these, SPF or DKIM, must be valid and aligned with the claimed domain. Emails failing this check are dealt with according to the DMARC policy — they might be rejected, quarantined, or let through with no action.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;The Takeaway&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;With the rise in sophisticated phishing attacks and the paramount importance of trust in digital communication, DMARC is more than just an advanced email security protocol. It&apos;s a beacon of trust, ensuring that genuine emails see the light of day while malicious ones lurk in the shadows. For organizations and individuals alike, understanding and implementing DMARC is a step towards a safer, more trustworthy digital communication landscape.&lt;/p&gt;
&lt;p&gt;So, the next time you&apos;re looking at your email security measures, remember that DMARC isn&apos;t just an option — it&apos;s a necessity.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Further Resources and Tools&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;For those who wish to dive deeper into DMARC and its intricacies, here are some valuable resources and tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DMARC Guide&lt;/strong&gt;: A comprehensive guide by the Global Cyber Alliance that covers the nuances of DMARC in detail. &lt;a href=&quot;https://www.globalcyberalliance.org/dmarc/&quot;&gt;Check it out here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DMARC Setup Checker&lt;/strong&gt;: An invaluable tool provided by the Global Cyber Alliance. It not only checks if your DMARC is set up correctly but also offers tips on rectifications if needed. &lt;a href=&quot;https://dmarcguide.globalcyberalliance.org/#/&quot;&gt;Try the tool here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Check for undefined in JavaScript]]></title>
            <description><![CDATA[Something that everyone that has been working with JavaScript for a while has done is checking if a variable is undefined. In this article, I explain which are the different ways that you can use for it and the differences between them.]]></description>
            <guid isPermaLink="false">Check for undefined in JavaScript</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[beginners]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 03 May 2020 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;If you’re writing JavaScript more or less regularly, at some point you’re probably faced with a situation where there was a need to check if a variable is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But, what is the best way to do it?&lt;/p&gt;
&lt;h2&gt;The intuitive way&lt;/h2&gt;
&lt;p&gt;Any programmer with experience in other language will use the intuition to figure out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (x === undefined) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this will work without any problem, or almost.&lt;/p&gt;
&lt;p&gt;Comparing directly with &lt;code&gt;undefined&lt;/code&gt; will work on all modern browsers. But old browsers allowed its value to be re-assigned like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;undefined = &apos;new value&apos;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this re-assignment, a direct computation will not work as expected.&lt;/p&gt;
&lt;p&gt;This behavior was fixed in 2009 with &lt;a href=&quot;https://es5.github.io/#x15.1.1.3&quot;&gt;ECMAScript 5&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;15.1.1.3 undefined&lt;/strong&gt;&lt;br&gt;
The value of &lt;code&gt;undefined&lt;/code&gt; is &lt;strong&gt;undefined&lt;/strong&gt; (see 8.1). This property has the attributes { [[Writable]]: &lt;strong&gt;false&lt;/strong&gt;, [[Enumerable]]: &lt;strong&gt;false&lt;/strong&gt;, [[Configurable]]: &lt;strong&gt;false&lt;/strong&gt; }.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The “safe” way&lt;/h2&gt;
&lt;p&gt;If you have to support old browsers and you’re concerned about someone re-assigning the value of &lt;code&gt;undefined&lt;/code&gt; there are other ways to do the check.&lt;/p&gt;
&lt;h3&gt;Reading the type&lt;/h3&gt;
&lt;p&gt;You can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&quot;&gt;typeof operator&lt;/a&gt;, that will return the string &lt;code&gt;&amp;quot;undefined&amp;quot;&lt;/code&gt; so you can check for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (typeof x === &amp;quot;undefined&amp;quot;) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;typeof&lt;/code&gt; operator does not throw an error if the variable has not been declared.&lt;/p&gt;
&lt;h3&gt;Using &lt;code&gt;void&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Alternatively, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&quot;&gt;typeof operator&lt;/a&gt; to check for &lt;code&gt;undefined&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (x === void(0)) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the zero doesn’t have any special meaning. As stated on MDN:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;void operator&lt;/strong&gt; evaluates the given &lt;em&gt;expression&lt;/em&gt; and then returns &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined&quot;&gt;undefined&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Which way is better&lt;/h2&gt;
&lt;p&gt;In my time as a consultant, I learned what’s the best answer for this kind of question: it depends. I would depend on the concrete use case you have, but I can give you some tips.&lt;/p&gt;
&lt;p&gt;In general, I tend to use the convention that is already present on the codebase. But if you’re writing a new code that will run only on modern browsers, I’ll suggest going for the direct comparison (it’s clear and easy to understand also for people that don’t know JavaScript). For old browsers support, I strongly recommend to create a function &lt;code&gt;isUndefined&lt;/code&gt; and use the option of your choice inside. Then the code will express their purpose clearly to everyone.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[The power of MVP]]></title>
            <description><![CDATA[A minimum viable product (MVP) is often linked to the startup world but is a very useful tool in large corporations too. And to succeed with it is important to have engineering teams be completely engaged.]]></description>
            <guid isPermaLink="false">The power of MVP</guid>
            <category><![CDATA[MVP]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Wed, 29 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;There is a lot of literacy about minimum viable products (MVP) everywhere. I don’t think I could bring to the field more information or value that the one that already exists but I’ll give my point of view on it based on an experience I had working with one client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mvp.png&quot; alt=&quot;MVP - A skate first, then a bike and finally a car&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A minimum viable product (MVP) is a version of a product with just enough features to satisfy early customers and provide feedback for future product development.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s start putting this article into context. The client was a leading European company in the real estate field, although I don’t think the domain matters in this case, and the product team had an idea of a quite complex product they want to sell to his customers. In order to know the acceptance by the website users, we run multiple A/B tests to see which was the most successful approach. The product itself was no that complex to implement but the decision of which users should see what, that was another story. We had to take into account the location of the user, in which location was searching, the last visit to the page, etc. The number of values that we had to play with was big, so in order to have enough valuable data to make the proper decision, we ran the tests for almost half a year.&lt;/p&gt;
&lt;p&gt;This kind of experiment doesn’t make sense without proper metrics, so we measured everything. Once the test finished, the data analysis team did his job and turns out the values were not the expected ones, neither close to it. Turns out not everything was that bad. One small part of the product had a really good acceptance between users, and one month later the product team came up with a different product based on this small part.&lt;/p&gt;
&lt;p&gt;After this, not that small introduction, is where this story begins. This new product did not have the complex rules of the previous one: no location related, neither user visits or search history. The customers will have a special section on the page to show their products and they could share how they prefer with their clients. Now that we had the product (the user-facing part was already implemented for the previous test) was time to make it real and start selling it.&lt;/p&gt;
&lt;p&gt;One day we had the meeting to define the architecture and how we were going to do it. The two engineering teams involved, the head of technology and the product owner. Around 14 people in the room (actually virtual rooms since teams were distributed in different countries) discussing what was going to be the best way to implement it and trying to guess when was going to be ready. Someone said because the product needs to be bought by customers we should talk soon or later with the engineering team in charge of this area. The team in charge of the products will have to create a new microservice to handle the new product and the one in charge of the website will have to consume and process this data in order to enable or not the product for a given customer.&lt;/p&gt;
&lt;p&gt;All together start to look complex again, first guesses of when it would be done were at least three months, but probably more since it would involve coordination with multiple engineering teams, marketing, design, etc. Listening to all the discussions happening the lazy part of my brain got activated and I asked a key question to the product owner: “&lt;em&gt;How is this product going to be addressed to the customers in order to sell it in the short term?&lt;/em&gt;”. The answer was the key to find a more easy way to solve this problem. Only a small group of people in the sales team will contact the most important customers to sell the product, at least initially; and after that, they will evaluate which other customers would be interested.&lt;/p&gt;
&lt;p&gt;With this new information, I proposed an unorthodox approach for the implementation. Instead of building the complex system, coordinate multiple teams and block the launch until everything is done; why not hardcode the customer id’s on the code and have just a couple of lines to handle the logic. Every time the product sold to a customer, someone just has to send an email to the team and we could add the id in minutes. This, obviously, is not a solution that scales but is not the intention. Since the sales were going to be “manually” at the beginning we can expect the pace of which customers will acquire the product will be controlled.&lt;/p&gt;
&lt;p&gt;The proposal I made was actually well received by everyone, this will allow us to start selling earlier and will relieve the pressure on the engineering teams to build the final solution. In just one week we were having the product in place and sold to the first customer. The next months the teams were more relaxed working on the final implementation that will not involve manual interactions anymore.&lt;/p&gt;
&lt;p&gt;So, this was the story I want to share. I don’t know if it would be useful for you but at least I learned some important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the implementation as simple as possible, you not only will reach the marked earlier probably you could remove or relax some deadlines.&lt;/li&gt;
&lt;li&gt;Engineering teams should be involved as early as possible on the product definition because different points of view can find a better solution.&lt;/li&gt;
&lt;li&gt;The whole vision of the project should be shared with engineers, not only the part they have to work on since it helps to decide the architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, I&apos;m going to keep doing one of the things I consider most important in a developer: being lazy. Because this attitude will help me to find the most easier and fastest way to solve a problem.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[SOLID - Principles of Object-Oriented Design]]></title>
            <description><![CDATA[SOLID Principles are a valuable tool to write good object-oriented software. This article tries to put some light on the subject with simple explanations and examples for each principle using TypeScript.]]></description>
            <guid isPermaLink="false">SOLID - Principles of Object-Oriented Design</guid>
            <category><![CDATA[Object-Oriented]]></category>
            <category><![CDATA[Computer Science]]></category>
            <category><![CDATA[SOLID]]></category>
            <category><![CDATA[TypeScript]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sat, 07 Dec 2019 00:00:00 GMT</pubDate>
            <content:encoded>&lt;blockquote&gt;
&lt;p&gt;This article is based on the work done by &lt;a href=&quot;https://twitter.com/KayandraJT&quot;&gt;Samuel Oloruntoba&lt;/a&gt; in his article
&lt;a href=&quot;https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design&quot;&gt;S.O.L.I.D: The First 5 Principles of Object Oriented Design&lt;/a&gt; but using
TypeScript instead of PHP for the examples.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt; is an acronym for the first five principles of the article
&lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;&lt;em&gt;Principles of Object-Oriented Design&lt;/em&gt;&lt;/a&gt;
by Robert C. Martin.&lt;/p&gt;
&lt;p&gt;Applying these principles helps to develop maintainable and extensible code. They
also help to catch code smells, refactor code easily, and practice a good agile
development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; stands for &lt;strong&gt;SRP&lt;/strong&gt; - Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt; stands for &lt;strong&gt;OCP&lt;/strong&gt; - Open-Closed Principle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; stands for &lt;strong&gt;LSP&lt;/strong&gt; - Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; stands for &lt;strong&gt;ISP&lt;/strong&gt; - Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; stands for &lt;strong&gt;DIP&lt;/strong&gt; - Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SRP - Single Responsibility Principle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A software entity (classes, modules, functions, etc.) should have one, and
only one, reason to change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This principle means that an entity should do only one thing. So single
responsibility denotes some &lt;strong&gt;work in isolation&lt;/strong&gt;. Therefore if we have a
software entity that performs some calculations the only reason to change it is
if these calculations need to change.&lt;/p&gt;
&lt;p&gt;In order to understand better the principle, we can do an example. Let&apos;s say
that we have to implement an application that given some shapes it calculates the
sum of the area of these shapes and prints the output. So, let&apos;s start creating
our shapes classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class Circle {
  public readonly radius: number;

  constructor(radius: number) {
    this.radius = radius;
  }
}

class Square {
  public readonly side: number;

  constructor(side: number) {
    this.side = side;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we create an &lt;code&gt;AreaCalculator&lt;/code&gt; class that is going to have the logic to sum
the area of our shapes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class AreaCalculator {
  public readonly shapes: Shape[];

  constructor(shapes: Shape[]) {
    this.shapes = shapes;
  }

  public sum(): number {
    // logic to sum the areas
  }

  public output(): string {
    return `Sum of the areas of provided shapes: ${this.sum()}`
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use the &lt;code&gt;AreaCalculator&lt;/code&gt; we have to create an array of shapes, instantiate
the class and show the output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const shapes: any[] = [new Circle(2), new Circle(3), new Square(5)];

const areas = new AreaCalculator(shapes);

console.log(areas.output());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this implementation has a problem. In this example, &lt;code&gt;AreaCalculator&lt;/code&gt;
handles the logic to calculate the sum of the areas &lt;strong&gt;and&lt;/strong&gt; to output the data.
What if the user wants the output in JSON?&lt;/p&gt;
&lt;p&gt;Here is when &lt;em&gt;Single Responsibility Principle&lt;/em&gt; comes into play. &lt;code&gt;AreaCalculator&lt;/code&gt;
should only change if we change how we calculate the sum of the areas, not when
we want a different output or representation.&lt;/p&gt;
&lt;p&gt;We can fix this by implementing a class which its only responsibility is to
output the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const shapes: any[] = [new Circle(2), new Circle(3), new Square(5)];

const areas = new AreaCalculator(shapes);
const output = new Outputter(areas);

console.log(output.text());
console.log(output.json());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have two classes with one responsibility each one, if we want to change
how calculations are made only &lt;code&gt;AreaCalculator&lt;/code&gt; will change and the same to
change the output, it will affect only &lt;code&gt;Outputter&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;OCP - Open-Closed Principle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Software entities (classes, modules, functions, etc.) should be open for
extension, but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A desirable property that our software entities is to be easy to extend his
functionality without the need to change the entity itself.&lt;/p&gt;
&lt;p&gt;Using the previous example, now we want to introduce a new fancy shape: the
&lt;em&gt;Triangle&lt;/em&gt;. But first, take a closer look at the sum part of our &lt;code&gt;AreaCalculator&lt;/code&gt;
class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class AreaCalculator {
  public readonly shapes: Shape[];

  constructor(shapes: Shape[]) {
    this.shapes = shapes;
  }

  public sum() {
    let sum: number = 0;

    for (let shape of this.shapes) {
      if (shape instanceof Circle) {
        sum += Math.PI * Math.pow(shape.radius, 2);
      } else if (shape instanceof Square) {
        sum += shape.side * shape.side;
      }
    }

    return sum;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are violating the &lt;em&gt;Open/Close Principle&lt;/em&gt;, because in order to add support
for triangles we have to modify &lt;code&gt;AreaCalculator&lt;/code&gt; adding a new &lt;code&gt;else if&lt;/code&gt; block in
order to handle the calculation of the new area.&lt;/p&gt;
&lt;p&gt;To fix this we can move the code that calculates the area to the corresponding
shapes, and make that shapes implement an interface that describes better what
a shape can do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface Shape {
  area(): number;
}

class Circle implements Shape {
  public readonly radius: number;

  constructor(radius: number) {
    this.radius = radius;
  }

  public area(): number {
    return Math.PI * Math.pow(this.radius, 2);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the &lt;code&gt;AreaCalculator&lt;/code&gt; looks like the code below, that allows us to create new
kind of shapes and it will work always that this new shape implements the &lt;code&gt;Shape&lt;/code&gt;
interface.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class AreaCalculator {
  public readonly shapes: Shape[];

  constructor(shapes: Shape[]) {
    this.shapes = shapes;
  }

  public sum(): number {
    let sum: number = 0;

    for (let shape of this.shapes) {
      sum += shape.area();
    }

    return sum;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;LSP - Liskov Substitution Principle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Derived class must be substitutable for their base class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this principle means is that objects in a program should be replaceable
with instances of their subtypes without altering the correctness of that
program. So if you pass a subclass of an abstraction you need to make sure you
don’t alter any behavior or state semantics of the parent abstraction.&lt;/p&gt;
&lt;p&gt;Continuing with the &lt;code&gt;AreaCalculator&lt;/code&gt; class, now we want to create a
&lt;code&gt;VolumeCalculator&lt;/code&gt; class that extends &lt;code&gt;AreaCalculator&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class VolumeCalculator extends AreaCalculator {
  public readonly shapes: Shape[];

  constructor(shapes: Shape[]) {
    this.shapes = shapes;
  }

  public sum(): number[] {
    // logic to calculate the volumes and then return
    // and array of output
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To understand better this example let&apos;s make a more detailed version of the
&lt;code&gt;Outputter&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class Outputer {

  private calculator;

  constructor(calculator: AreaCalculator) {
    this.calculator = calculator;
  }

  public json(): string {
    return JSON.stringify({
      sum: this.calculator.sum();
    })
  }

  public text(): string {
    return `Sum of provided shapes: ${this.calculator.sum()}`;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this implementation, if we try to run a code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const areas = new AreaCalculator(shapes2D);
const volumes = new VolumeCalculator(shapes3D);

console.log(&apos;Areas - &apos;, new Ouputter(areas).text());
console.log(&apos;Volumes - &apos;, new Ouputter(volumes).text());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The program is not gonna fail but the output will not be consistent since one
output will be something like &lt;code&gt;Areas - Sum of provided shapes: 42&lt;/code&gt;, and the
other &lt;code&gt;Volumes - Sum of provided shapes: 13, 15, 14&lt;/code&gt;. This is not what we expect
from our program.&lt;/p&gt;
&lt;p&gt;This happens because the violation of the &lt;em&gt;Liskov Substitution Principle&lt;/em&gt;, the
&lt;code&gt;sum&lt;/code&gt; method of the &lt;code&gt;VolumeCalculator&lt;/code&gt; class is an array of numbers while the
&lt;code&gt;AreaCalculator&lt;/code&gt; is just a number.&lt;/p&gt;
&lt;p&gt;To fix this we have to reimplement the sum method of &lt;code&gt;VolumeCalculator&lt;/code&gt; to
return a number instead of an array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class VolumeCalculator extends AreaCalculator {

  // constructor

  public function sum(): number {
      // logic to calculate the volumes and then return
      // and array of output
      return sum;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;ISP - Interface Segregation Principle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Make fine grained interfaces that are client specific.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, we want to keep interfaces as small as possible, so clients are not
forced to implement methods that they don&apos;t actually need.&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- REVIEW: This explanation could be more detailed --&amp;gt;&lt;/p&gt;
&lt;p&gt;So, coming back to our shape interface, now that we can calculate volumes our
interface looks similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface Shape {
  area(): number;
  volume(): number;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we know that not all our shapes have a volume, &lt;code&gt;Square&lt;/code&gt; is a 2D shape but
because of the interface, we are forced to implement a &lt;code&gt;volume&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Applying the &lt;em&gt;Interface Segregation Principle&lt;/em&gt; we split the &lt;code&gt;Shape&lt;/code&gt; interface
into two different interfaces, one to define 2D shapes and another for 3D shapes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface Shape2D {
  area(): number;
}

interface Shape3D {
  volume(): number;
}

class Cuboid implements Shape2D, Shape3D {
  public area(): number {
    // calculate the surface area of the cuboid
  }

  public volume(): number {
    // calculate the volume of the cuboid
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;DIP - Dependency Inversion Principle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Depend on abstractions, not on concretions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this principle comes to says is that high-level modules should not depend
on low-level modules, but they should depend on abstractions.&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- REVIEW: This explanation could be more detailed --&amp;gt;&lt;/p&gt;
&lt;p&gt;This principle allows for decoupling, an example that seems like the best way to
explain this principle. Let&apos;s see a new class to save our shapes &lt;code&gt;ShapeManager&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class ShapeManager {
  private database;

  constructor(database: MySQL) {
    this.database = database;
  }

  public load(name: string): Shape {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;ShapeManager&lt;/code&gt; is a high-level module while &lt;code&gt;MySQL&lt;/code&gt; is a low-level
module, but this is a violation of the &lt;code&gt;Dependency Inversion Principle&lt;/code&gt; since we
are forced to depend on &lt;code&gt;MySQL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we want to change our database in the future we would have to edit the &lt;code&gt;ShapeManager&lt;/code&gt;
class and thus violates &lt;em&gt;Open-Close Principle&lt;/em&gt;. In this case we should not care
about which kind of database are we using, so to depend on abstractions on this
case we will make use of an interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface Database {
  connect(): Connection;
}

class MySQL implements Database {
  public connect(): Connetion {
    // creates a connection
  }
}

class ShapeManager {
  private database;

  constructor(database: Database) {
    this.database = database;
  }

  public load(name: string): Shape {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now our high-level and low-level modules are depending on abstractions.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When starting to write Object-Oriented programing the &lt;strong&gt;SOLID&lt;/strong&gt; principles could
be difficult to understand and, if they are understood, see where and when to
apply them is not trivial. But they are an example of one of the most important
things in software development, practice and experience will make you apply
these principles in a very natural and intuitive way.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Adaptive Media Serving using Service Workers]]></title>
            <description><![CDATA[Everyone has experienced how visiting a web site over a slow network connection usually takes ages to load. We are going to explore how to load different media content using the Network Information API.]]></description>
            <guid isPermaLink="false">Adaptive Media Serving using Service Workers</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Service Workers]]></category>
            <category><![CDATA[performance]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Mon, 17 Jun 2019 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;&lt;em&gt;Pairing with &lt;strong&gt;&lt;a href=&quot;https://github.com/estermv&quot;&gt;@Ester Martí&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Everyone has experienced how visiting a web site over a slow network connection
usually takes ages to load, making the experience very painful or completely
impossible at all.&lt;/p&gt;
&lt;p&gt;When it comes to web development, we usually tend to forget about load
performance focusing more on adding new fancy features. But probably our users
are not using the last brand new MacBook Pro connected to a 1Gps network. Is
more likely that they are using a mid-range or low-end mobile device with a
network connection that in the best case is a 3G connection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.statista.com/statistics/241462/global-mobile-phone-website-traffic-share/&quot;&gt;In 2018, 52.2% of all global web pages were served to mobile phones.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, taking care of performance is important and one of the most resource-consuming
is media delivery. We are going to show how to adapt the media
delivery based on the network connection using the
&lt;a href=&quot;http://wicg.github.io/netinfo/&quot;&gt;Network Information API&lt;/a&gt;. This is an improved
version of an experiment I did with my coworker &lt;a href=&quot;https://twitter.com/eduaquiles&quot;&gt;@Eduardo Aquiles&lt;/a&gt;
as a React component, similar to what &lt;a href=&quot;https://mxb.dev/&quot;&gt;Max Böck&lt;/a&gt; explains in
his article about &lt;a href=&quot;https://mxb.dev/blog/connection-aware-components/&quot;&gt;connection-aware components&lt;/a&gt;
but in this case, using service workers.&lt;/p&gt;
&lt;h2&gt;The Network Information API&lt;/h2&gt;
&lt;p&gt;The Network Information API is a draft specification that exposes an interface
to JavaScript with information about the device connection.&lt;/p&gt;
&lt;p&gt;The interface consists of a different set of attributes that gives us multiple
information about the network. The most relevant for us in this article are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type:&lt;/strong&gt; The &lt;a href=&quot;http://wicg.github.io/netinfo/#dfn-connection-type&quot;&gt;connection type&lt;/a&gt;
that the user agent is using. (e.g. ‘wifi’, ‘cellular’, ‘ethernet’, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;effectiveType&lt;/strong&gt; The &lt;a href=&quot;http://wicg.github.io/netinfo/#dfn-effective-connection-type&quot;&gt;effective connection type&lt;/a&gt;
that is determined using a combination of recently observed &lt;a href=&quot;http://wicg.github.io/netinfo/#dom-networkinformation-rtt&quot;&gt;rtt&lt;/a&gt; and &lt;a href=&quot;http://wicg.github.io/netinfo/#dom-networkinformation-downlink&quot;&gt;downlink&lt;/a&gt; values. (&lt;em&gt;&lt;a href=&quot;#effectivetype-values&quot;&gt;see table&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;saveData&lt;/strong&gt; Indicates when the user requested a reduced data usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;effectiveType values&lt;/h3&gt;
&lt;p&gt;&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;th&amp;gt;ECT&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Minimum RTT (ms)&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Maximum downlink (Kbps)&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;Explanation&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td data-column=&amp;quot;ECT&amp;quot;&amp;gt;slow‑2g&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;RTT&amp;quot;&amp;gt;2000&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Downlink&amp;quot;&amp;gt;50&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Explanation&amp;quot;&amp;gt;The network is suited for small transfers only such as text-only pages.&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td data-column=&amp;quot;ECT&amp;quot;&amp;gt;2g&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;RTT&amp;quot;&amp;gt;1400&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Downlink&amp;quot;&amp;gt;70&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Explanation&amp;quot;&amp;gt;The network is suited for transfers of small images.&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td  data-column=&amp;quot;ECT&amp;quot;&amp;gt;3g&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;RTT&amp;quot;&amp;gt;270&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Downlink&amp;quot;&amp;gt;700&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Explanation&amp;quot;&amp;gt;The network is suited for transfers of large assets such as high resolution images, audio, and SD video.&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td  data-column=&amp;quot;ECT&amp;quot;&amp;gt;4g&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;RTT&amp;quot;&amp;gt;0&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Downlink&amp;quot;&amp;gt;∞&amp;lt;/td&amp;gt;
&amp;lt;td data-column=&amp;quot;Explanation&amp;quot;&amp;gt;The network is suited for HD video, real-time video, etc.&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;caption align=&amp;quot;bottom&amp;quot;&amp;gt;Table of &amp;lt;a href=&amp;quot;http://wicg.github.io/netinfo/#dfn-effective-connection-type&amp;quot;&amp;gt;effective connection types (ECT)&amp;lt;/a&amp;gt;&amp;lt;/caption&amp;gt;
&amp;lt;/table&amp;gt;&lt;/p&gt;
&lt;h3&gt;Browser support&lt;/h3&gt;
&lt;p&gt;The API does not have a full browser support yet but is &lt;a href=&quot;https://caniuse.com/#feat=netinfo&quot;&gt;supported by the most
popular mobile browsers&lt;/a&gt;
which are the ones where this technique will have more impact.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/caniuse.png&quot; alt=&quot;Browser support for Network Information API&quot;&gt;&lt;/p&gt;
&lt;p&gt;In fact, 70% of mobile users have this API enabled on their device.&lt;/p&gt;
&lt;h2&gt;Adaptive Media Serving&lt;/h2&gt;
&lt;p&gt;Our purpose will be to serve different media resources based on the information
that we get from the &lt;code&gt;effectiveType&lt;/code&gt; attribute. When we talk about different
media resources it could be a completely different media, like switching between
HD video, HD image or low quality image, the approach suggested by
&lt;a href=&quot;https://addyosmani.com/blog/adaptive-serving/&quot;&gt;Addy Osmani&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we are going to use different compression levels for the same
image.&lt;/p&gt;
&lt;p&gt;First, we need to get the proper quality based on network conditions. This is
easily reachable using the next snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getMediaQuality() {
  const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;

  if (!connection) {
    return &apos;medium&apos;;
  }

  switch (connection.effectiveType) {
    case &apos;slow-2g&apos;:
    case &apos;2g&apos;:
      return &apos;low&apos;;
    case &apos;3g&apos;:
      return &apos;medium&apos;;
    case &apos;4g&apos;:
      return &apos;high&apos;;
    default:
      return &apos;low&apos;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine that we have an image server where we can specify the quality of the
image that we want with a query parameter &lt;strong&gt;quality&lt;/strong&gt; as &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt; or
&lt;code&gt;high&lt;/code&gt;. Therefore we can set the quality on the &lt;code&gt;src&lt;/code&gt; attribute of the images
tags as it follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=&amp;quot;http://images.magarcia.io/cute_cat?quality=low&amp;quot; alt=&amp;quot;Cute cat&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const images = document.querySelectorAll(&apos;img&apos;);
images.forEach(img =&amp;gt; {
  img.src = img.src.replace(&apos;low&apos;, getMediaQuality());
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to notice that the default quality set on the image is &lt;code&gt;low&lt;/code&gt;,
which means that devices will load first the low quality image and then if it
has a high-speed connection will load the better quality one.&lt;/p&gt;
&lt;p&gt;Then the JavaScript snippet above will get all the images in the document and
will replace the quality parameter to the appropriate one based on what the
&lt;code&gt;getMediaQuality&lt;/code&gt; function returns. If the quality is &lt;code&gt;low&lt;/code&gt; is not going to do
more requests, but if it changes it will do two requests: one with the &lt;code&gt;low&lt;/code&gt;
quality image when the browsers parse the &lt;code&gt;img&lt;/code&gt; tag and another one with
&lt;code&gt;medium&lt;/code&gt; or &lt;code&gt;high&lt;/code&gt; quality when the JavaScript code is executed.&lt;/p&gt;
&lt;p&gt;This is not ideal but it will improve load times on slow networks. But for
medium/high connection networks, as we mentioned before, it will make two
requests for each image consuming more data than needed.&lt;/p&gt;
&lt;h2&gt;Using Service Workers&lt;/h2&gt;
&lt;p&gt;The problem mentioned regarding the two requests can be fixed using
&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;service workers&lt;/a&gt;,
intercepting the request made by the browser and replacing it with the
appropriate quality for the image.&lt;/p&gt;
&lt;p&gt;First, we need to register our service worker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (&apos;serviceWorker&apos; in navigator) {
  window.addEventListener(&apos;load&apos;, function() {
    navigator.serviceWorker.register(&apos;/sw.js&apos;).then(
      function(registration) {
        console.log(&apos;ServiceWorker registration successful with scope: &apos;, registration.scope);
      },
      function(err) {
        console.log(&apos;ServiceWorker registration failed: &apos;, err);
      }
    );
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we add a listener for the fetch event, which for all the images requested
from the site will append the right quality parameter using the &lt;code&gt;getMediaQuality&lt;/code&gt;
function created in the previous section.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;self.addEventListener(&apos;fetch&apos;, function(event) {
  if (/\.jpg$|.png$|.webp$/.test(event.request.url)) {
    const url = event.request.url + `?quality=${getMediaQuality()}`;
    event.respondWith(fetch(url));
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we don’t need to specify the quality parameter on the &lt;code&gt;img&lt;/code&gt; tag anymore
since the service worker will be in charge of that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=“http://images.magarcia.io/cute_cat” alt=“Cute cat”/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;p&gt;You can find the code of this post (a more complete, clean and with fewer bugs)
on &lt;a href=&quot;https://github.com/estermv/adaptative-media-serving&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wicg.github.io/netinfo/&quot;&gt;Network Information API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API&quot;&gt;Network Information API - Web APIs | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[BLoC Pattern with React Hooks]]></title>
            <description><![CDATA[About how to extract the business logic from the components of a React application using the BLoC pattern from Flutter, the new hooks API, and RxJS observables.]]></description>
            <guid isPermaLink="false">BLoC Pattern with React Hooks</guid>
            <category><![CDATA[React]]></category>
            <category><![CDATA[BLoC]]></category>
            <category><![CDATA[hooks]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Mon, 18 Feb 2019 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;The &lt;strong&gt;BLoC Pattern&lt;/strong&gt; has been designed by &lt;em&gt;Paolo Soares&lt;/em&gt; and &lt;em&gt;Cong Hui&lt;/em&gt;, from
Google and first presented during the &lt;em&gt;DartConf 2018&lt;/em&gt; (January 23-24, 2018).
&lt;a href=&quot;https://www.youtube.com/watch?v=PLHln7wHgPE&quot; title=&quot;BLoC Pattern Flutter&quot;&gt;See the video on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BLoC stands for &lt;strong&gt;B&lt;/strong&gt;usiness &lt;strong&gt;Lo&lt;/strong&gt;gic &lt;strong&gt;C&lt;/strong&gt;omponent. Initially was conceived to
allow to reuse the same code between Flutter and Angular Dart, but in fact is
independently of the platform: web application, mobile application, back-end.&lt;/p&gt;
&lt;p&gt;It can be considered an alternative to the
&lt;a href=&quot;https://pub.dartlang.org/packages/flutter_redux&quot; title=&quot;Redux port for flutter&quot;&gt;Redux port for flutter&lt;/a&gt; making
use of Dart streams. In our case, we’re going to use Observables from the library
&lt;a href=&quot;https://rxjs.dev/&quot; title=&quot;RxJS&quot;&gt;RxJS&lt;/a&gt; , but any other option like
&lt;a href=&quot;http://staltz.github.io/xstream/&quot; title=&quot;xstream&quot;&gt;xstream&lt;/a&gt; will be valid as well.&lt;/p&gt;
&lt;p&gt;In short, the BLoC will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contain business logic (ideally in bigger applications we will have multiple BLoCs)&lt;/li&gt;
&lt;li&gt;rely &lt;em&gt;exclusively&lt;/em&gt; on the use of &lt;em&gt;Observables&lt;/em&gt; for both input (&lt;em&gt;Observer&lt;/em&gt;) and output (&lt;em&gt;Observable&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;remain &lt;em&gt;platform independent&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;remain &lt;em&gt;environment independent&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How BLoC works?&lt;/h2&gt;
&lt;p&gt;I’m not going to explain extensively how BLoC works (there is other people that
did a better job I will do here), but just some basic hints.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bloc-schema.png&quot; alt=&quot;BLoC Schema&quot;&gt;&lt;/p&gt;
&lt;p&gt;The BLoC will hold the business logic and components will have no knowledge
about what&apos;s happening inside. Components will send &lt;em&gt;events_to the BLoC via
_Observers&lt;/em&gt; and will be notified by the BLoC via &lt;em&gt;Observables&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Implementing the BLoC&lt;/h2&gt;
&lt;p&gt;This is basic typescript example of a search BLoC using RxJS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;export class SearchBloc {
  private _results$: Observable&amp;lt;string[]&amp;gt;;
  private _preamble$: Observable&amp;lt;string&amp;gt;;
  private _query$ = new BehaviorSubject&amp;lt;string&amp;gt;(&apos;&apos;);

  constructor(private api: API) {
    this._results$ = this._query$.pipe(
      switchMap((query) =&amp;gt; {
        return observableFrom(this.api.search(query));
      })
    );
    this._preamble$ = this.results$.pipe(
      withLatestFrom(this._query$, (_, q) =&amp;gt; {
        return q ? `Results for ${q}` : &apos;All results&apos;;
      })
    );
  }

  get results$(): Observable&amp;lt;string[]&amp;gt; {
    return this._results$;
  }

  get preamble$(): Observable&amp;lt;string&amp;gt; {
    return this._preamble$;
  }

  get query(): Observer&amp;lt;string&amp;gt; {
    return this._query$;
  }

  dispose() {
    this._query$.complete();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;results$&lt;/code&gt; and &lt;code&gt;preamble$&lt;/code&gt; are exposed to be subscribed from a component and
they express asynchronous values that change in response to changes in &lt;code&gt;query&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query&lt;/code&gt; is exposed as &lt;code&gt;Observer&amp;lt;string&amp;gt;&lt;/code&gt; to the outside, to allow the addition
of new value from the components. Within &lt;code&gt;SearchBloc&lt;/code&gt; , we have
&lt;code&gt;_query$: BehaviorSubject&amp;lt;string&amp;gt;&lt;/code&gt; as the stream source, and the constructor
declares &lt;code&gt;_results$&lt;/code&gt; and &lt;code&gt;_preamble$&lt;/code&gt; to respond to &lt;code&gt;_query$&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Using it on React&lt;/h2&gt;
&lt;p&gt;In order to use it on React we need to create a new instance of the BLoC and
share it to the child components using a React context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const searchBloc = new SearchBloc(new API());
const SearchContext = React.createContext(searchBloc);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have to expose it using the context provider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const App = () =&amp;gt; {
  const searchBloc = useContext(SearchContext);

  useEffect(() =&amp;gt; {
    return searchBloc.dispose;
  }, [searchBloc]);

  return (
    &amp;lt;SearchContext.Provider&amp;gt;
      &amp;lt;SearchInput /&amp;gt;
      &amp;lt;ResultList /&amp;gt;
    &amp;lt;/SearchContext.Provider&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s important to have the &lt;code&gt;useEffect&lt;/code&gt; returning the dispose method of the BLoC
so it will complete the observer when the component is unmounted.&lt;/p&gt;
&lt;p&gt;Then we can publish changes to the BLoC from the &lt;code&gt;SearchInput&lt;/code&gt; component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const SearchInput = () =&amp;gt; {
  const searchBloc = useContext(SearchContext);
  const [query, setQuery] = useState(&apos;&apos;);

  useEffect(() =&amp;gt; {
    searchBloc.query.next(query);
  }, [searchBloc, query]);

  return (
    &amp;lt;input
      type=&amp;quot;text&amp;quot;
      name=&amp;quot;Search&amp;quot;
      value={query}
      onChange={({ target }) =&amp;gt; setQuery(target.value)}
    /&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We got the BLoC using the hook &lt;code&gt;useContext&lt;/code&gt; and then with &lt;code&gt;useEffect&lt;/code&gt; every time
the query change we publish the new value to the BLoC.&lt;/p&gt;
&lt;p&gt;Now it’s time to the &lt;code&gt;ResultList&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ResultList = () =&amp;gt; {
  const searchBloc = useContext(SearchContext);
  const [results, setResults] = useState([]);

  useEffect(() =&amp;gt; {
    return searchBloc.results$.subscribe(setResults);
  }, [searchBloc]);

  return (
    &amp;lt;div&amp;gt;
      {results.map(({ id, name }) =&amp;gt; (
        &amp;lt;div key={id}&amp;gt;{name}&amp;lt;/div&amp;gt;
      ))}
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, we use the &lt;code&gt;useContext&lt;/code&gt; to get the BLoC, but now in the &lt;code&gt;useEffect&lt;/code&gt;
we subscribe the changes on the &lt;code&gt;results$&lt;/code&gt; interface to update the local state
of the component. It’s important to return the return value of the subscribe,
since it will unsubscribe when the component is unmounted.&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;The final code is not complex, at least if you have a minimal knowledge about
&lt;em&gt;Observables&lt;/em&gt; and &lt;em&gt;hooks&lt;/em&gt;. I have the feeling that the code is quite readable
and helps to keep the business logic outside the components. It’s true that we
should take care about to unsubscribe from the observables and dispose the BLoC
when the components are unmounted, but these issues could be easily solvable
creating some new hooks like &lt;code&gt;useBlocObservable&lt;/code&gt; and &lt;code&gt;useBlocObserver&lt;/code&gt;. But this
I’ll try in the future, soon I hope, in a side project I’m using this pattern.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Refactor TodoMVC with Redux Starter Kit]]></title>
            <description><![CDATA[Redux Starter Kit is a toolset to make clean and readable code when working with React and Redux. See an example of how you can refactor an existing application getting all the profit from Redux Starter Kit.]]></description>
            <guid isPermaLink="false">Refactor TodoMVC with Redux Starter Kit</guid>
            <category><![CDATA[React]]></category>
            <category><![CDATA[Redux]]></category>
            <category><![CDATA[JavaScript]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sat, 26 Jan 2019 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;I&apos;ve been working with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; more than two years now. I
started in a quite big project with a lot of work already done that was using
&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. I was a bit overwhelming start directly with so
much stuff done, especially with a framework I didn&apos;t know much about. But after
some time I got more comfortable and experienced.&lt;/p&gt;
&lt;p&gt;Recently I discovered the project &lt;a href=&quot;https://redux-starter-kit.js.org/&quot;&gt;Redux Starter Kit&lt;/a&gt;
from the same team that works on Redux. It&apos;s a simple toolset that provides
utilities that can make really simple and easy work with Redux. In fact, one of
the tools it provides, &lt;code&gt;createReducer&lt;/code&gt;, is a patter I&apos;ve been using for a while
and it helps me a lot on reducing boilerplate code and speeding up my development
(especially in new projects).&lt;/p&gt;
&lt;p&gt;So in order to learn more about and get comfortable using it, I decided to
migrate an already existing codebase with Redux, using this toolset. Obviously,
as an example project for a frontend framework, I picked the omnipresent
&lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt;, in concrete the version that Redux provides as
example in &lt;a href=&quot;https://github.com/reduxjs/redux/tree/master/examples/todomvc&quot;&gt;his repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;p&gt;For whoever doesn&apos;t know how this app looks like in Redux, it has two main
reducers &lt;code&gt;visibilityFilter&lt;/code&gt; and &lt;code&gt;todos&lt;/code&gt;; both with his respective actions,
action creators and selectors.&lt;/p&gt;
&lt;h2&gt;Visibility Filter&lt;/h2&gt;
&lt;p&gt;I started with the most &amp;quot;simple&amp;quot; reducer, to start small and then move to a more
complex state.&lt;/p&gt;
&lt;h3&gt;Reducer&lt;/h3&gt;
&lt;p&gt;The reducer, as it came from the Redux example, it&apos;s already quite simple and
easy to understand.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// reducers/visibilityFilter.js
import { SET_VISIBILITY_FILTER } from &apos;../constants/ActionTypes&apos;;
import { SHOW_ALL } from &apos;../constants/TodoFilters&apos;;

export default (state = SHOW_ALL, action) =&amp;gt; {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return action.filter;
    default:
      return state;
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to create reducers Redux Starter Kit provides a function &lt;code&gt;createReducer&lt;/code&gt;,
as I mentioned before it&apos;s a pattern I already used and I&apos;m quite happy with it.&lt;/p&gt;
&lt;p&gt;The idea is simple, instead of having to create a reducer function with a
&lt;code&gt;switch case&lt;/code&gt; statement inside, this function expects the initial state as a
first parameter and an object where the keys are the action types and the value
are the reducers (&lt;code&gt;(state, action) =&amp;gt; { /* reducer code */&lt;/code&gt;) for this action.&lt;/p&gt;
&lt;p&gt;It reduces some boilerplate and will set always the &lt;code&gt;default&lt;/code&gt; statement as
&lt;code&gt;return state&lt;/code&gt;. But to me, the biggest benefit is the readability that provides.&lt;/p&gt;
&lt;p&gt;This is how the visibility filter reducer looks like using &lt;code&gt;createReducer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// reducers/visibilityFilter.js
import { createReducer } from &apos;redux-starter-kit&apos;;
import { SET_VISIBILITY_FILTER } from &apos;../constants/ActionTypes&apos;;
import { SHOW_ALL } from &apos;../constants/TodoFilters&apos;;

export default createReducer(SHOW_ALL, {
  [SET_VISIBILITY_FILTER]: (state, action) =&amp;gt; action.filter
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Actions creators&lt;/h3&gt;
&lt;p&gt;Now is time for the actions. The visibility filter only has one action
&lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt; and the creator is very simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// actions/index.js
import * as types from &apos;../constants/ActionTypes&apos;;

/* ... Other actions ...*/
export const setVisibilityFilter = filter =&amp;gt; ({
  type: types.SET_VISIBILITY_FILTER,
  filter
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the actions, this toolset can be quite opinionated. It provides the function
&lt;code&gt;createAction&lt;/code&gt; that only expects the action type as a parameter. As a result,
we get an action creator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// actions/index.js
import * as types from &apos;../constants/ActionTypes&apos;;

/* ... Other actions ...*/
export const setVisibilityFilter = createAction(types.SET_VISIBILITY_FILTER);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This action creator can be run with or without parameters. In the case that we
send a parameter, this will be set as the payload of the action. These are some
examples of how will work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const setVisibilityFilter = createAction(&apos;SET_VISIBILITY_FILTER&apos;);

let action = setVisibilityFilter();
// { type: &apos;SET_VISIBILITY_FILTER&apos; }

action = setVisibilityFilter(&apos;SHOW_COMPLETED&apos;);
// returns { type: &apos;SET_VISIBILITY_FILTER&apos;, payload: &apos;SHOW_COMPLETED&apos; }

setVisibilityFilter.toString();
// &apos;SET_VISIBILITY_FILTER&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the filter is set into the &lt;code&gt;payload&lt;/code&gt; key of the action, this implies a
refactor on the reducer since we were using the key filter, but luckily is
very simple to change.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// reducers/visibilityFilter.js
import { createReducer } from &apos;redux-starter-kit&apos;;
import { SET_VISIBILITY_FILTER } from &apos;../constants/ActionTypes&apos;;
import { SHOW_ALL } from &apos;../constants/TodoFilters&apos;;

export default createReducer(SHOW_ALL, {
  [SET_VISIBILITY_FILTER]: (state, action) =&amp;gt; action.payload
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Selectors&lt;/h3&gt;
&lt;p&gt;For me using selectors is one of the best choices that anyone can take when
working with React, because it makes really simple refactor how the state looks
like without having to change all the components that are consuming this part
of the state.&lt;/p&gt;
&lt;p&gt;The selector of the visibility filter is one of the easiest ones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// selectors/index.js
const getVisibilityFilter = state =&amp;gt; state.visibilityFilter;

/* ... Other selectors ...*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it doesn&apos;t change too much using the function &lt;code&gt;createSelector&lt;/code&gt;. Actually,
we have more code now than with the previous version, but trust me it&apos;s going
to be simpler. Just keep reading.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// selectors/index.js
import { createSelector } from &apos;redux-starter-kit&apos;;

const getVisibilityFilter = createSelector([&apos;visibilityFilter&apos;]);

/* ... Other selectors ...*/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Slices&lt;/h3&gt;
&lt;p&gt;Until now the only thing that we did is changing some simple functions to more
simple functions using different &lt;em&gt;creators&lt;/em&gt;. But now is where I discovered the
real power of the toolset: &lt;code&gt;createSlice&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;createSlice&lt;/code&gt; is a function that accepts an initial state, an object full of
reducer functions, and optionally a &amp;quot;slice name&amp;quot;, and automatically generates
action creators, action types, and selectors ready to be used.&lt;/p&gt;
&lt;p&gt;Now we can throw all the code that we did.&lt;/p&gt;
&lt;p&gt;Creating a slice for the visibility filter is very clean and easy to understand,
and since we can throw all the previous code that we refactor the final result
it&apos;s removing a lot of boilerplate.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// ducks/visibilityFilter.js
import { createSlice } from &apos;redux-starter-kit&apos;;

export default createSlice({
  slice: &apos;visibilityFilter&apos;,
  initialState: SHOW_ALL,
  reducers: {
    setVisibilityFilter: (state, action) =&amp;gt; action.payload
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a single object as a result containing all that we need to work
properly with Redux. This is how it can be used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const reducer = combineReducers({
  visibilityFilter: visibilityFilter.reducer
});

const store = createStore(reducer);

store.dispatch(visibilityFilter.actions.setVisibilityFilter(SHOW_COMPLETED));
// -&amp;gt; { visibilityFilter: &apos;SHOW_COMPLETED&apos; }

const state = store.getState();
console.log(visibilityFilter.selectors.getVisibilityFilter(state));
// -&amp;gt; SHOW_COMPLETED
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the changes did until now are in &lt;a href=&quot;https://github.com/magarcia/todomvc-redux-starter-kit/commit/ae78e0aacd4827786a63f29db4d6f4e0a2079422&quot;&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Todos&lt;/h2&gt;
&lt;p&gt;The todos reducer is more complex so I&apos;m not going to show the refactor step by
step. Instead, I&apos;m going to explain how the final result looks like, but if you
are interested &lt;a href=&quot;https://github.com/magarcia/todomvc-redux-starter-kit/blob/ba531a2ea7c2c5ee8148e2a1ab491e7e0a31e819/src/ducks/todos.js&quot;&gt;go directly the final result&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first part is defining the initial state:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// ducks/todos.js
const initialState = [
  {
    text: &apos;Use Redux&apos;,
    completed: false,
    id: 0
  }
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to make the slice creation more readable, I extracted the different
reducer actions in different functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// ducks/todos.js
const addTodo = (state, action) =&amp;gt; [
  ...state,
  {
    id: state.reduce((maxId, todo) =&amp;gt; Math.max(todo.id, maxId), -1) + 1,
    completed: false,
    text: action.payload.text
  }
];

const deleteTodo = (state, action) =&amp;gt; state.filter(todo =&amp;gt; todo.id !== action.payload.id);

const editTodo = (state, action) =&amp;gt;
  state.map(todo =&amp;gt;
    todo.id === action.payload.id ? { ...todo, text: action.payload.text } : todo
  );

const completeTodo = (state, action) =&amp;gt;
  state.map(todo =&amp;gt;
    todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo
  );
const completeAllTodos = state =&amp;gt; {
  const areAllMarked = state.every(todo =&amp;gt; todo.completed);
  return state.map(todo =&amp;gt; ({
    ...todo,
    completed: !areAllMarked
  }));
};

const clearCompleted = state =&amp;gt; state.filter(todo =&amp;gt; todo.completed === false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can put all together in a new slice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// ducks/todos.js
const todos = createSlice({
  slice: &apos;todos&apos;,
  initialState,
  reducers: {
    add: addTodo,
    delete: deleteTodo,
    edit: editTodo,
    complete: completeTodo,
    completeAll: completeAllTodos,
    clearCompleted: clearCompleted
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default the selectors returned by &lt;code&gt;createSlice&lt;/code&gt; are very simple, they just
return the value from the state (eg: &lt;code&gt;todos.selectors.getTodos&lt;/code&gt;). But in this
application, we need to define more complex selectors.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;getVisibleTodos&lt;/code&gt; needs two know about the current visibility filter
and also the todos. &lt;code&gt;createSelector&lt;/code&gt; gets as a first parameter an array with
strings (the path to select from the state) or other selectors and as a second
parameter the function that&apos;s going to implement the logic that we want to
select the todos based on the selected filter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// ducks/todos.js
const { getVisibilityFilter } = visibilityFilter.selectors;

todos.selectors.getVisibleTodos = createSelector(
  [getVisibilityFilter, todos.selectors.getTodos],
  (visibilityFilter, todos) =&amp;gt; {
    switch (visibilityFilter) {
      case SHOW_ALL:
        return todos;
      case SHOW_COMPLETED:
        return todos.filter(t =&amp;gt; t.completed);
      case SHOW_ACTIVE:
        return todos.filter(t =&amp;gt; !t.completed);
      default:
        throw new Error(&apos;Unknown filter: &apos; + visibilityFilter);
    }
  }
);

todos.selectors.getCompletedTodoCount = createSelector([todos.selectors.getTodos], todos =&amp;gt;
  todos.reduce((count, todo) =&amp;gt; (todo.completed ? count + 1 : count), 0)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can notice in the previous code, I created the new selectors in the
&lt;code&gt;selectors&lt;/code&gt; object in the &lt;code&gt;todos&lt;/code&gt; slice so now we have all the selectors
accessible in the same place.&lt;/p&gt;
&lt;h2&gt;Create Store&lt;/h2&gt;
&lt;p&gt;The last two functions provided by the library are &lt;code&gt;configureStore&lt;/code&gt; and
&lt;code&gt;getDefaultMiddleware&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;configureStore&lt;/code&gt; is an abstraction over the standard Redux &lt;code&gt;createStore&lt;/code&gt;
function. Doesn&apos;t provide more functionalities than &lt;code&gt;createStore&lt;/code&gt; but it makes
things easier to read, like enable developer tools that is just a boolean.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getDefaultMiddleware&lt;/code&gt; returns a list of middlewares
&lt;code&gt;[immutableStateInvariant, thunk, serializableStateInvariant]&lt;/code&gt; in development
and &lt;code&gt;[thunk]&lt;/code&gt; in production.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;: It can detect mutations in reducers during
a dispatch, and also mutations that occur between dispatches (eg: in selectors
or components).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serializable-state-invariant-middleware&lt;/code&gt;: It deeply checks your state tree
and your actions for non-serializable values such as functions, Promises, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// store.js
import { configureStore, getDefaultMiddleware } from &apos;redux-starter-kit&apos;;
import { combineReducers } from &apos;redux&apos;;
import { visibilityFilter, todos } from &apos;./ducks&apos;;

const preloadedState = {
  todos: [
    {
      text: &apos;Use Redux&apos;,
      completed: false,
      id: 0
    }
  ]
};

const reducer = combineReducers({
  todos: todos.reducer,
  visibilityFilter: visibilityFilter.reducer
});

const middleware = [...getDefaultMiddleware()];

export const store = configureStore({
  reducer,
  middleware,
  devTools: process.env.NODE_ENV !== &apos;production&apos;,
  preloadedState
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Redux Starter Kit looks interesting, it reduces boilerplate code making the code
cleaner and easy to understand. But also it makes really fast to develop new
code.&lt;/p&gt;
&lt;p&gt;Source Code: https://github.com/magarcia/todomvc-redux-starter-kit&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[$watch with Angular 2]]></title>
            <description><![CDATA[How to migrate the $watch feature from AngularJS to Angular2]]></description>
            <guid isPermaLink="false">$watch with Angular 2</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Mon, 04 Jul 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;In my &lt;a href=&quot;/2016/07/03/events-in-angular2/&quot;&gt;previous post&lt;/a&gt;, I was talking about how
to implement events from Angular 1 in Angular 2. But in the snippet of code that
I use as an example we can find another thing that not exists in Angular 2:
&lt;code&gt;$watch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I start defining the problem. We can have a directive or Angular 1 component
like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var module = angular.module(&amp;quot;myApp&amp;quot;);

module.directive(&apos;exampleDirective&apos;, function () {
  return {
    template: &apos;&amp;lt;div&amp;gt;{{internalVar}}&amp;lt;/div&amp;gt;&apos;,
    scope: {
      externalVar: &amp;quot;=&amp;quot;
    },
    controller: function(scope, element) {
      scope.$watch(&apos;externalVar&apos;, function(newVal, oldVal) {
        if (newVal !== oldVal) {
          scope.internalVar = newVal;
        }
      });
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to migrate this code to Angular 2 we find a trouble: the new Angular
don&apos;t have &lt;code&gt;scope&lt;/code&gt;, so it don&apos;t have &lt;code&gt;$watch&lt;/code&gt;. How we can watch a directive
attribute? The solution is the &lt;strong&gt;set&lt;/strong&gt; syntax from ES6.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;set&lt;/strong&gt; syntax binds an object property to a function to be called when
there is an attempt to set that property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;From &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;MDN&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So we can bind the input for a component to a function that does the same as the
&lt;code&gt;$watch&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import { Component, Input } from &apos;@angular/core&apos;;

@Component({
  selector: &apos;example-component&apos;
})
export class ExampleComponent {
  public internalVal = null;

  constructor() {}

  @Input(&apos;externalVal&apos;)
  set updateInternalVal(externalVal) {
    this.internalVal = externalVal;
  }
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Events in Angular2]]></title>
            <description><![CDATA[About how to migrate events from AngularJS to Angular2.]]></description>
            <guid isPermaLink="false">Events in Angular2</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 03 Jul 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;During the migration of the feed component, I found some lines that I didn&apos;t
know how to code it on Angular 2. The following code is an extract of the code
I&apos;m talking about:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;if (!feed.isLocalScreen) {
  // Until this timeout is reached, the &amp;quot;you are muted&amp;quot; notification
  // will not be displayed again
  var mutedWarningTimeout = now();

  scope.$on(&apos;muted.byRequest&apos;, function() {
    mutedWarningTimeout = secondsFromNow(3);
    MuteNotifier.muted();
  });

  scope.$on(&apos;muted.byUser&apos;, function() {
    // Reset the warning timeout
    mutedWarningTimeout = now();
  });

  scope.$on(&apos;muted.Join&apos;, function() {
    mutedWarningTimeout = now();
    MuteNotifier.joinedMuted();
  });

  scope.$watch(&apos;vm.feed.isVoiceDetected()&apos;, function(newVal) {
    // Display warning only if muted (check for false, undefined means
    // still connecting) and the timeout has been reached
    if (newVal &amp;amp;&amp;amp; feed.getAudioEnabled() === false &amp;amp;&amp;amp; now() &amp;gt; mutedWarningTimeout) {
      MuteNotifier.speaking();
      mutedWarningTimeout = secondsFromNow(60);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see in the snippet, if the condition is true then the directive
listens for events of type &lt;code&gt;muted.byRequest&lt;/code&gt;, &lt;code&gt;muted.byUser&lt;/code&gt; and &lt;code&gt;muted.Join&lt;/code&gt;.
The code that involves this events is easy, without any type of complexity (for
now we ignore the &lt;code&gt;$watch&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But, wait a minute, I have read the documentation of Angular 2 like a hundred
times and I don&apos;t remember nothing about &amp;quot;events&amp;quot; with Angular 1.X style. That&apos;s
because it not exist. Angular 2 don&apos;t have a way to make events like in Angular 1,
so I have to find a solution. After a search for a solution, I found &lt;a href=&quot;http://blog.lacolaco.net/post/event-broadcasting-in-angular-2/&quot;&gt;this entry&lt;/a&gt;
in laco&apos;s blog.&lt;/p&gt;
&lt;h2&gt;Broadcaster&lt;/h2&gt;
&lt;p&gt;Basically, the idea is to make a service that implements the &lt;code&gt;$broadcast&lt;/code&gt; and
&lt;code&gt;$on&lt;/code&gt; a method as we had in &lt;code&gt;$rootScope&lt;/code&gt;. To do this we use Observables, very
importants in Angular 2, and for this case, we use a &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/subjects.md&quot;&gt;Subject&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import { Subject } from &apos;rxjs/Subject&apos;;
import { Observable } from &apos;rxjs/Observable&apos;;
import &apos;rxjs/add/operator/filter&apos;;
import &apos;rxjs/add/operator/map&apos;;

interface BroadcastEvent {
  key: any;
  data?: any;
}

export class Broadcaster {
  private _eventBus: Subject&amp;lt;BroadcastEvent&amp;gt;;

  constructor() {
    this._eventBus = new Subject&amp;lt;BroadcastEvent&amp;gt;();
  }

  broadcast(key: any, data?: any) {
    this._eventBus.next({ key, data });
  }

  on&amp;lt;T&amp;gt;(key: any): Observable&amp;lt;T&amp;gt; {
    return this._eventBus
      .asObservable()
      .filter(event =&amp;gt; event.key === key)
      .map(event =&amp;gt; &amp;lt;T&amp;gt;event.data);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, now we can start to use events like in the example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// child.ts
@Component({
    selector: &apos;child&apos;
})
export class ChildComponent {
  constructor(private broadcaster: Broadcaster) {
  }

  registerStringBroadcast() {
    this.broadcaster.on&amp;lt;string&amp;gt;(&apos;MyEvent&apos;)
      .subscribe(message =&amp;gt; {
        ...
      });
  }

  emitStringBroadcast() {
    this.broadcaster.broadcast(&apos;MyEvent&apos;, &apos;some message&apos;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;How I solved the problem?&lt;/h2&gt;
&lt;p&gt;I didn&apos;t. These events are only to show the user information pop-ups about when
he is muted, so it&apos;s not a critical feature. By now these events are fired and
listen in different components, and some of it still implemented in Angular 1.4.&lt;/p&gt;
&lt;p&gt;This is a solution I want to share with you, but I&apos;m not sure if this will be
the way that I will use to solve the problem. Because these events probably won&apos;t
be necessary when I reimplement the &lt;code&gt;MuteNotifier&lt;/code&gt;.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Midterm]]></title>
            <description><![CDATA[A retrospective about the work done during the Google Summer of code.]]></description>
            <guid isPermaLink="false">Midterm</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Wed, 29 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;GSoC midterm just passed. I think it&apos;s time to do a review about the work done
since I started the project. After this weeks working on Jangouts and using it
regularly for follow up meetings I can say that I love it like it was mine.
It&apos;s really rewarding to work on a project like that, not too big but with a
growing community behind. Nowadays Jangouts it&apos;s in an early stage, at least this
is what I believe, but with a lot of potential.&lt;/p&gt;
&lt;h2&gt;Work done&lt;/h2&gt;
&lt;p&gt;I have not fulfilled the timings defined initially by myself, but I&apos;m really
close and the worst part passed. Until now Jangots was migrated to Typescript
with a new build/development process and it&apos;s a hybrid application with
Angular 1.x and Angular 2.&lt;/p&gt;
&lt;p&gt;Jangouts is composed of different components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browser-info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chat&lt;/code&gt; - &lt;strong&gt;Migrated&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feed&lt;/code&gt; - &lt;strong&gt;Almost migrated&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;footer&lt;/code&gt; - &lt;strong&gt;Migrated&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notifier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;room&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;router&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;screen-share&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;videochat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The migration process for each component implies a conversion from Angular 1 to
2 and a collection of tests with as close as possible to 100% of coverage. The
most complex component to migrate from my point of view are &lt;code&gt;feed&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt;
because are the component in charge of the video render and the communication
with Janus backend. Probably router will be problematic, but because with new
Angular 2 router it should be a complete rewrite.&lt;/p&gt;
&lt;h2&gt;Mentors&lt;/h2&gt;
&lt;p&gt;All that I can say about &lt;strong&gt;@ancorgs&lt;/strong&gt; and &lt;strong&gt;@imobach&lt;/strong&gt; is good. We make daily meetings
(when it&apos;s possible) giving me feedback about what I&apos;m doing, but with enough
freedom to take my own decisions (whenever I give reasons).&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;For the next weeks, I will continue migrating components until I can quit Angular
1 from the project. When migration finish, Jangouts will be an Angular 2 project
with a quite complete test suite, so can be considered that my GSoC work will be
finished, but this is not enough for me. I think a lot of things can do
better:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Restructure the project moving some login that now are inside components to services.&lt;/li&gt;
&lt;li&gt;Take more profit about Observables (probably using &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve the UI and the mobile UX (&lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;progressive web apps&lt;/a&gt; concepts will be useful here).&lt;/li&gt;
&lt;li&gt;Improve communication and community (a project webpage, better contributing docs, etc)&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[AngularBeers with Miško Hevery]]></title>
            <description><![CDATA[Upcoming features that will make Angular 2 a powerful option in a near future.]]></description>
            <guid isPermaLink="false">AngularBeers with Miško Hevery</guid>
            <category><![CDATA[Angular]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 26 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;Last Tuesday I enjoyed a talk of &lt;a href=&quot;http://misko.hevery.com/about/&quot;&gt;Miško Hevery&lt;/a&gt;
about Angular2 thanks to guys of &lt;a href=&quot;http://www.meetup.com/AngularJS-Beers/&quot;&gt;AngularBeers&lt;/a&gt;.
It was a talk about what is coming with Angular 2 and the key point with which
we have to stay is that Angluar leave the concept of frontend framework to
become a full a platform.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/angularbeers-with-misko-hevery.jpg&quot; alt=&quot;miskohevery&quot;&gt;
&lt;em&gt;Sara (a good coworker and better friend), Miško and me&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But, apart from this, I would like to remark a couple of things that will make
Angular 2 a powerful option in a near future.&lt;/p&gt;
&lt;h2&gt;Offline compile&lt;/h2&gt;
&lt;p&gt;What does this means? Templates have been one of the places where mistakes are made
since Angular 1. Even if we introduce TypeScript or lint tools, we couldn&apos;t be
able to detect mistakes in templates until they are evaluated at the runtime.
Until now Angular 1.X compiles the templates each time they should be rendered.&lt;/p&gt;
&lt;p&gt;With Angular 2 (without offline compile) the templates are compiled only once.
But with offline compiling the templates are compiled on build time to
JavaScript so it will be never compiled in the browser. The benefits we obtain
here is that it enables us to statically type-check our templates with
TypeScript, which is awesome, in addition to skipping the runtime compilation
and smaller library size.&lt;/p&gt;
&lt;h2&gt;Angular Universal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Universal (isomorphic) JavaScript support for Angular 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With Angular Universal, we can run Angular 2 in the server side and this gives
us some advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Better Perceived Performance:&lt;/strong&gt; The users will instantly see a server-rendered
view which greatly improves perceived performance and the overall user
experience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimized for Search Engines:&lt;/strong&gt; Server-side pre-rendering is a reliable way to
ensure that all search engines can access your content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Site Preview:&lt;/strong&gt; Ensure that Facebook, Twitter, and all other social media apps
correctly display a preview image of your app. (I deal with this problem before
and is a pain in the ass)&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Moving big parts to Angular 2]]></title>
            <description><![CDATA[Migrating the most important components and directives to Angualar2]]></description>
            <guid isPermaLink="false">Moving big parts to Angular 2</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 12 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;In a previous post I explained how I convert Jangouts to a hybrid Angular 1+2
application. This approach, instead of a full migration, has two objectives. In
first place test that the functionalities are working correctly is more easy,
because it&apos;s possible to run Jangouts and use it. And on the other hand, if I
can&apos;t finish the migration, the application will be still usable allowing others
to continue the work. But I hope this last scenario won&apos;t be real.&lt;/p&gt;
&lt;p&gt;With the hybrid approach applied, this week I have been working on migrating some
components to Angular 2. I started migrating the Chat component, more complex
than the Footer previously migrated, but not enough to be frustrating in these
early stages.&lt;/p&gt;
&lt;h2&gt;Migrating subcomponents&lt;/h2&gt;
&lt;p&gt;The Chat component of Jangouts has three subcomponents, a part of the main
component:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;chat-message&lt;/code&gt;&lt;/strong&gt;: That handles the render the message sent by the user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;log-entry&lt;/code&gt;&lt;/strong&gt;: That handles the notifications sent by the system (like &amp;quot;&lt;em&gt;The user
X has joined&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;chat-form&lt;/code&gt;&lt;/strong&gt;: That handles the input of messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These subcomponents are really simple, each one has a component class without
much code and a template. But the key of this migration has been that the styles
were moved from the main &lt;code&gt;scss&lt;/code&gt; file to independent files for each subcomponent.
This takes profit of &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/component-styles.html#!#view-encapsulation&quot;&gt;Angular 2 View Encapsulation&lt;/a&gt;,
ensuring that the styles will be only applied to the component.&lt;/p&gt;
&lt;p&gt;During the &lt;code&gt;chat-message&lt;/code&gt; migration, I found trouble. A problem that comes
from the sue of &lt;a href=&quot;https://github.com/ritz078/ng-embed&quot;&gt;ngEmbed&lt;/a&gt; library that
provides a directive to render the user messages. This directive allows users
to use emojis and embed links, images, videos, etc. But as expected the
library hasn&apos;t support for Angular 2, so I tried to upgrade the directive with
the &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/upgrade.html#!#how-the-upgrade-adapter-works&quot;&gt;Angular 2 Upgrade Adapter&lt;/a&gt;
but I found a strange error.&lt;/p&gt;
&lt;p&gt;After some investigation, I found that ngEmbed use a function as &lt;code&gt;templateUrl&lt;/code&gt;
attribute (which is allowed in Angular 1), but in the version of Angular 2 that
I&apos;m currently using with the project, the upgrade adapter don&apos;t support this
kind of &lt;code&gt;templateUrl&lt;/code&gt;. I saw in the master branch of Angular 2 that the code
has been updated to support this functionality, but now neither version
incorporates the change. So after discussing with my mentors, we decide to disable
this functionality in Jangouts and keep moving with the migration.&lt;/p&gt;
&lt;p&gt;I wish to have time to reenable it in the future.&lt;/p&gt;
&lt;h2&gt;Differentiate between component and directive&lt;/h2&gt;
&lt;p&gt;Migrate the main component was more complex. The main component has the list of
all messages (user and system messages) in a view that auto scroll when a new
message arrives. In the old Jangouts, this was one directive that renders the
list of messages and controls the auto scroll. But Angular 2 is a different
paradigm. In Angular 2, the correct approach, a component always have a template
and never interacts with the DOM and a directive never have a template and can
interact with the DOM.&lt;/p&gt;
&lt;p&gt;So this evidence that the main chat component would be migrated into two
different things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;component&lt;/strong&gt; to render the list of messages.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;directive&lt;/strong&gt; that auto scroll when it&apos;s necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the migration, we have the component that renders the list of messages and
inside it the directive that handles the auto scroll.&lt;/p&gt;
&lt;h2&gt;Putting all together&lt;/h2&gt;
&lt;p&gt;During the subcomponents migration, each one was downgraded to be Angular 1
compatible using the provided adapter by Angular 2 and manually tested with the
old version of the main component. When the main component was migrated, this
made that the code of the component was pure Angular 2 (without downgrade the
subcomponents) and the only thing to do to keep the compatibility with the rest
of the Angular 1 application was downgrade the main chat component.&lt;/p&gt;
&lt;h2&gt;Applying the correct application structure&lt;/h2&gt;
&lt;p&gt;The changes applied this week wasn&apos;t only in the code, I also update the
application structure following the recommendations of the &lt;a href=&quot;https://angular.io/styleguide#!#application-structure_&quot;&gt;style guide&lt;/a&gt;.
Previous to the migration the application has the following structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src
└── app
    ├── adapter.ts
    ├── variables.scss
    ├── index.scss
    ├── vendor.scss
    ├── index.ts
    ├── components
    │   ├── chat
    │   │   ├── chat-form.directive.html
    │   │   ├── chat-form.directive.js
    │   │   ├── chat.directive.html
    │   │   ├── chat.directive.js
    │   │   ├── chat-message.directive.html
    │   │   ├── chat-message.directive.js
    │   │   ├── log-entry.directive.html
    │   │   └── log-entry.directive.html
    │   ├── footer
    │   │   ├── footer.directive.html
    │   │   └── footer.directive.js
    │   └── [...]
    └── [...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But after the changes this is the result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src
└── app
    ├── adapter.ts
    ├── variables.scss
    ├── index.scss
    ├── vendor.scss
    ├── index.ts
    ├── chat
    │   ├── index.ts
    │   ├── chat.component.html
    │   ├── chat.component.scss
    │   ├── chat.component.spec.ts
    │   ├── chat.component.ts
    │   ├── chat-form
    │   │   ├── chat-form.component.html
    │   │   ├── chat-form.component.spec.ts
    │   │   ├── chat-form.component.ts
    │   │   └── index.ts
    │   ├── chat-message
    │   │   ├── chat-message.component.html
    │   │   ├── chat-message.component.scss
    │   │   ├── chat-message.component.spec.ts
    │   │   ├── chat-message.component.ts
    │   │   └── index.ts
    │   ├── log-entry
    │   │   ├── index.ts
    │   │   ├── log-entry.component.html
    │   │   ├── log-entry.component.spec.ts
    │   │   └── log-entry.component.ts
    │   └── message-autoscroll.directive.ts
    ├── footer
    │   ├── footer.component.html
    │   ├── footer.component.scss
    │   ├── footer.component.spec.ts
    │   ├── footer.component.ts
    │   └── index.ts
    ├── components
    │   └──  [...] // This contains the not migrated code
    └── [...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Currently working&lt;/h2&gt;
&lt;p&gt;Currently I&apos;m working on the migration of Feed component. This is one of the
most complex components in the application because it has a lot of services that
handles the video/audio streams.&lt;/p&gt;
&lt;p&gt;Actually, I&apos;ve moved all the services and factories to Angular 2 services, but I
still not enabled the support for work with the Angular 1 code. The reason? I
want to make a full test suite that tests these services deeply before to continue
with the migration of the rest of the component and make the integration with
the rest of the application.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Components migration started]]></title>
            <description><![CDATA[Start the migration of components from AngularJS to Angular2 in Jangouts.]]></description>
            <guid isPermaLink="false">Components migration started</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 05 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;Another week finished. This past week I could not do as much as I would have
liked. I still at exam time, so I had to spend much of the time studying. But
even so, there has been significant progress with regard to the project. We
have four important points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fixed the build process for production.&lt;/li&gt;
&lt;li&gt;Added test runner.&lt;/li&gt;
&lt;li&gt;Migrated the first component to Angular 2.&lt;/li&gt;
&lt;li&gt;Added the first test for a migrated component.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Fixing the build process&lt;/h2&gt;
&lt;p&gt;Last week we had the development environment ready and also, presumably, the
environment to distribute builds. But throughout the week, I noticed that with
the distributed build, Jangouts have issues with grid elements inside the video chat
room. After a while trying different configurations for Webpack, I found that
the issues were mainly related to the uglify process.&lt;/p&gt;
&lt;p&gt;The issue was related to the grid layout system of the video room, which is
implemented using &lt;a href=&quot;http://manifestwebdesign.github.io/angular-gridster/&quot;&gt;angular-gridster&lt;/a&gt;.
So, the problem can come form angular-gridster style or the JavaScript module.
First of all I tried to import directly the CSS of the library without load it
with Webpack. This didn&apos;t solve anything. Finally, I found that instead of including
the minified version of the library in &lt;code&gt;vendors.ts&lt;/code&gt; file, I should use the source
version.&lt;/p&gt;
&lt;p&gt;This is a little weird, source and minified version should work in the same way.
Regardless of this, using the source version fix the issue and this will not be
a problem because Webpack minify all the code, including &lt;code&gt;vendor.ts&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Adding test runner&lt;/h2&gt;
&lt;p&gt;This was easier than I expected. I use the awesome project
&lt;a href=&quot;https://github.com/AngularClass/angular2-webpack-starter&quot;&gt;angular2-webpack-starter&lt;/a&gt;
from &lt;a href=&quot;https://angularclass.com/&quot;&gt;@AngularClass&lt;/a&gt; as an inspiration source for
implement the test runner in Jangouts. I get the files &lt;code&gt;webpack.test.js&lt;/code&gt; and
&lt;code&gt;karma.conf.js&lt;/code&gt; and, after some small changes, all worked perfectly. This is one
of the best things of open source community: Don&apos;t Repeat Yourself.&lt;/p&gt;
&lt;h2&gt;Migrating the first component&lt;/h2&gt;
&lt;p&gt;I was waiting for this moment since I sent my proposal to GSoC. I started with
the migration of a simple component, probably the simplest component of whole
Jangouts, the footer. The footer in Jangouts only shows a link to
&lt;a href=&quot;https://www.suse.com/&quot;&gt;SUSE&lt;/a&gt; and the version of Jangouts.&lt;/p&gt;
&lt;p&gt;In the old Jangouts (I will start to differentiate between pre and post-migration
process) the footer component was composed by a simple Angular 1 directive with
a template and a &lt;a href=&quot;http://jade-lang.com/&quot;&gt;&lt;code&gt;jade&lt;/code&gt;&lt;/a&gt; template, that was rendered by
gulp adding the current version.&lt;/p&gt;
&lt;p&gt;The new footer component is equally simple. It&apos;s a &lt;a href=&quot;https://github.com/magarcia/jangouts/blob/5db2d9de547d6d56aaed90c633b5d98ce64f6219/src/app/components/footer/jh-footer.directive.ts&quot;&gt;TypeScript file&lt;/a&gt;
(a component definition with an empty class) and an &lt;a href=&quot;https://github.com/magarcia/jangouts/blob/5db2d9de547d6d56aaed90c633b5d98ce64f6219/src/app/components/footer/jh-footer.html&quot;&gt;Angular 2 template&lt;/a&gt;.
But has a difference with the previous version, neither gulp or any other thing
modifies the template for add the version. Instead, the previous solution, now
Webpack with the &lt;a href=&quot;https://webpack.github.io/docs/list-of-plugins.html#defineplugin&quot;&gt;DefinePlugin&lt;/a&gt;
add the version as a global constant during the build process, reading the
&lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This has a couple of benefits. First, the footer is now a pure Angular component
and, on the other hand, it&apos;s easier to test.&lt;/p&gt;
&lt;h2&gt;Adding tests&lt;/h2&gt;
&lt;p&gt;One of the important things to do during the migration to Angular 2, is adding
tests to the whole platform. And the new footer component has its own tests. It&apos;s
nothing complex or really &amp;quot;useful&amp;quot;, the tests just check if the &lt;code&gt;version&lt;/code&gt;
variable is correctly defined. But this test has an extra purpose, it helps me
to check the test runner and the coverage reporter are working correctly.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[First coding week]]></title>
            <description><![CDATA[The first week working on the migration of Jangouts to Angular2.]]></description>
            <guid isPermaLink="false">First coding week</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 29 May 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;The first week of the coding period at GSoC 2016, so I started the upgrading
process of Jangouts from Angular 1.x to Angular 2. This week, the tasks have
been fulfilled within the deadline, I hope to remain so for the next week.&lt;/p&gt;
&lt;p&gt;I&apos;m following the &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/upgrade.html&quot;&gt;upgrade guide&lt;/a&gt;
from official Angular docs, which has two main blocks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preparation&lt;/li&gt;
&lt;li&gt;Upgrading with The Upgrade Adapter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I just finished the preparation block. I was lucky because the code of Jangouts
is really clear and it follows two important points of the preparation block:
Follow the Angular style guide and use component directives. So this left me
only two things to do. First of all, switch from load files with &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;
tags to a module loader and then migrate the code from JavaScript to TypeScript.
But I&apos;ve done it in reverse order, first migrate to TypeScript and then switch to
a module loader. Why? I think this way is more &amp;quot;natural&amp;quot;, at least for this project.&lt;/p&gt;
&lt;h2&gt;Migrating to TypeScript&lt;/h2&gt;
&lt;p&gt;Jangouts has a gulp build system working, so I didn&apos;t have to worry about how
the scripts are loaded. First I worry about migrating the files to TypeScript
and when all was ready, then I try to take profit from the &lt;code&gt;import&lt;/code&gt; syntax of
TypeScript/ES6.&lt;/p&gt;
&lt;p&gt;Migrate code from JavaScript to TypeScript is really easy, only need to change
the extension form &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;. Obviously, the existing gulp system doesn&apos;t works
with these changes, so in parallel of running gulp you should run
&lt;code&gt;tsc --watch src/**/*.ts&lt;/code&gt;. This command shows a lot of errors but don&apos;t worry
about this if the JavaScript code is correct, all these errors are related to the
type checking process of TypeScript compiler.&lt;/p&gt;
&lt;p&gt;During this migration process, I also perform some changes in the code to make
it more modular. Jangouts have all the components registered in the same Angular
module &lt;code&gt;janusHangouts&lt;/code&gt; and in other projects I worked before I learned that this
can make some troubles when you have to do unit testing, so I define a
different module for each component (&lt;code&gt;janusHangouts.componentName&lt;/code&gt;)
and then make it a dependency of the main module. This has to advantages: make
tests is easier and in the future we can load components on demand with a
module loader (but I&apos;m not sure about the last one).&lt;/p&gt;
&lt;p&gt;Back to some, I said earlier, when compiling the JavaScript code with &lt;code&gt;tsc&lt;/code&gt; this
shows a lot of errors. One that could appear a lot is something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;error TS7006: Parameter &apos;$state&apos; implicitly has an &apos;any&apos; type.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is because TypeScript compiler wants a type defined for all variables, but
we can make that &lt;code&gt;tsc&lt;/code&gt; set the implicit type any for variables without type.
The only thing to do is disable the option &lt;code&gt;noImplicitAny&lt;/code&gt; in the &lt;code&gt;tsconfig.json&lt;/code&gt;
file.&lt;/p&gt;
&lt;p&gt;Another error we can find when working with HTML elements is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;error TS2339: Property &apos;muted&apos; does not exist on type &apos;HTMLElement&apos;.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This error is produced from a code like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var video = $(&apos;video&apos;, element)[0];
video.muted = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The error is produced because TypeScript is type save. So the
&lt;code&gt;$(&apos;video&apos;, element)[0]&lt;/code&gt; returns the type &lt;code&gt;HTMLElement&lt;/code&gt; which does not contain
a &lt;code&gt;muted&lt;/code&gt; property. The subtype &lt;code&gt;HTMLVideoElement&lt;/code&gt; does however contain the
&lt;code&gt;muted&lt;/code&gt; property. So the solution is to cast the result to &lt;code&gt;HTMLVideoElement&lt;/code&gt;
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var video = &amp;lt;HTMLVideoElement&amp;gt;$(&apos;video&apos;, element)[0];
video.muted = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, another common error is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;error TS2339: Property &apos;id&apos; does not exist on type &apos;{}&apos;.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is another &amp;quot;problem&amp;quot; produced by the type validations of TypeScript. We can
found errors like that in fragments of code similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var room = {};

// Some code here...

function isRoom(room) {
  return room.id == roomId;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To solve this and make the code less error-prone, we should define an interface
for the room object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;interface Room {
  id?: number; // ? makes the attribute optional
}

// Some code here ...

var room: Room = {};

// Some code here...

function isRoom(room: Room) {
  return room.id == roomId;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Using a Module Loader&lt;/h2&gt;
&lt;p&gt;Why we should use a module loader? We can find the response in Angular site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using a module loader such as &lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;,
&lt;a href=&quot;http://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;, or &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;
allows us to use the built-in module systems of the TypeScript or ES2015
languages in our apps. We can use the import and export features that explicitly
specify what code can and will be shared between different parts of the
application. [...]&lt;/p&gt;
&lt;p&gt;When we then take our applications into production, module loaders also make
it easier to package them all up into production bundles with batteries
included.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I discard Browserify because I had bad experiences in the past. So I have only
tried with SystemJS and Webpack.&lt;/p&gt;
&lt;h3&gt;SystemJS&lt;/h3&gt;
&lt;p&gt;SystemJS looks really clean, really simple. The only thing I was to do is define
an entry point (normally the main file of the application) and the &lt;code&gt;import&lt;/code&gt;
syntax do the rest. So, if we have the &lt;code&gt;import&lt;/code&gt; statements correctly placed, all
work without a problem.&lt;/p&gt;
&lt;p&gt;But with this solution, we need to conserve gulp, because SystemJS only cares
about the imports. So this implies add the TypesScript compiler to gulp and
disable the auto inject of script in html.&lt;/p&gt;
&lt;p&gt;Sincerely I didn&apos;t try that before trying to rewrite the gulp configuration I
wanted to have a look at Webpack first.&lt;/p&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;
&lt;p&gt;The configuration of Webpack is more complex than SystemJS, but it gives a
substitution of gulp. As SystemJS does, we need to define an entry point for the
application and also tell him where is the &lt;code&gt;index.html&lt;/code&gt; to include the
JavaScript files.&lt;/p&gt;
&lt;p&gt;Initially, I had some troubles, but after looking at some examples, I had a
functional version. Exploring more depth in Webpack I found something that makes
me choose it before others: we can &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; non JavaScript files.
So we can do things like require the template of an Angular directive, and in
the building process this template will be included as a string variable inside
the component, and with styles we have the same feature. This functionality
improves the final build of the application because all the files needed by a
component will be placed inside the JavaScript file of the component, improving
the performance but without making difficult program it.&lt;/p&gt;
&lt;h2&gt;One more thing&lt;/h2&gt;
&lt;p&gt;This summer looks exciting with all the things I have to learn with GSoC. If
you want to follow the progress of what I&apos;m doing keep update of this blog or
follow my contributions on GitHub. Also, I published a
&lt;a href=&quot;https://trello.com/b/vtQJBxbf/jangouts&quot;&gt;Trello board&lt;/a&gt; with the planning and
things to do with this project (not fully update yet but in progress).&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Ending Community Bonding Period]]></title>
            <description><![CDATA[The period of coding for the Google Summer of Code is going to start.]]></description>
            <guid isPermaLink="false">Ending Community Bonding Period</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sun, 22 May 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;It&apos;s been a few weeks since my last post, but I&apos;ve been kind of busy.&lt;/p&gt;
&lt;p&gt;Tomorrow starts the period of coding for the Google Summer of Code. So, as I
said previously, I&apos;ve been working on Jangouts (making some contributions,
fixing some bugs, etc.). But also, last week I started making some tests. Not a
complete test suite, just tests for some components; the code will change a lot
with the migration to Angular 2, make a full test suite would be a useless
extra work. These tests are to learn how the code of Jangouts is structured
and know how it works.&lt;/p&gt;
&lt;p&gt;Inside the community bonding period, I kept in touch with my mentors
(&lt;strong&gt;&lt;a href=&quot;https://github.com/imobach&quot;&gt;@imobach&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/ancorgs&quot;&gt;@ancorgs&lt;/a&gt;&lt;/strong&gt;).
This past week we had a Jangouts call (obviously we use Jangouts for meetings) to
make the planning for next weeks. We will have a Trello board to keep tasks
organized and daily meetings to follow the progress. Also, by my part, I
compromised to write a blog post each week with a brief overview of the
work of the week.&lt;/p&gt;
&lt;p&gt;The next days the migration process to Angular 2 will start, but first I need a
a plan.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[First Weeks at GSoC 2016]]></title>
            <description><![CDATA[Joining Google Summer of Code Program to work on the migration of an application to Angular2.]]></description>
            <guid isPermaLink="false">First Weeks at GSoC 2016</guid>
            <category><![CDATA[GSoC]]></category>
            <category><![CDATA[Jangouts]]></category>
            <dc:creator><![CDATA[Martin Garcia]]></dc:creator>
            <pubDate>Sat, 07 May 2016 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;This year I have been selected in the Google Summer of Code Program. This year too I
made my first proposal. I was looking for a project related to Angular,
especially with Angular 2, to improve my knowledge about this framework and his
new version. It was amazing when I found
&lt;a href=&quot;https://github.com/openSUSE/mentoring/issues/16&quot;&gt;this idea&lt;/a&gt; from the people of
OpenSuse.&lt;/p&gt;
&lt;p&gt;The community bonding period began April 22, I got in touch with my mentors
and start fixing some bugs in &lt;a href=&quot;https://github.com/jangouts/jangouts/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Amagarcia+created%3A%3C2016-05-07_&quot;&gt;Jangouts&lt;/a&gt;
and reporting someones to &lt;a href=&quot;https://github.com/meetecho/janus-gateway/issues?utf8=%E2%9C%93&amp;amp;q=+is%3Aissue+author%3Amagarcia+created%3A%3C2016-05-07&quot;&gt;Janus-Gateway&lt;/a&gt;.
I hope that write these posts will be useful, for me and my mentors, to keep
a progress journal about what I&apos;m doing about the project.&lt;/p&gt;
&lt;p&gt;These weeks was about exploring the code of Jangouts and I try to do something with
Angular 2, and obviously to get updated about what happens in
&lt;a href=&quot;http://www.ng-conf.org&quot;&gt;ng-conf&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
        </item>
    </channel>
</rss>